"""
Sample using atheris to find bugs in a function via fuzzing.

- get_sum_then_square_root is the function being tested
- fuzzy_testing() is the fuzz target and takes the bytes generated by the fuzzer
- atheris.FuzzedDataProvider is used to consume the bytes and generate valid (int) args and scope the fuzzing


See https://github.com/google/atheris

"""

from inspect import signature
import atheris

with atheris.instrument_imports():
    import sys


def int_and_str_func(x: int, s: str):
    if len(s) < 5:
        return True

    if x == 2048:
        error = "x cannot be 2048"
        raise ValueError(error)

    if s[0] == "k":
        if s[1] == "i":
            if s[2] == "R":
                if s[3] == "b":
                    if s[4] == "Y":
                        error = f"{s} is not accepted by this function."
                        print(error)
                        raise ValueError(error)


# TESTED_FUNC = None


@atheris.instrument_func
def fuzzy_testing(data):
    """
    Performs fuzzy testing on the function get_sum_then_square_root.

    :param data: data provided for fuzzy testing (generated bytes)
    :return: None
    """
    global TESTED_FUNC
    sig = signature(TESTED_FUNC)
    fdp = atheris.FuzzedDataProvider(data)
    args = []

    # Determine how to split the data based on input parameters
    portion = int(len(data) / len(sig.parameters))

    # Generate the correct amount and types of input parameters for the function
    for param in sig.parameters:
        if sig.parameters[param].annotation == int:
            args.append(fdp.ConsumeInt(portion))
        elif sig.parameters[param].annotation == str:
            args.append(fdp.ConsumeUnicodeNoSurrogates(portion))
    # Run the function with the generated data
    TESTED_FUNC(*args)


def main(my_func: callable):
    global TESTED_FUNC
    TESTED_FUNC = my_func
    atheris.Setup(sys.argv, fuzzy_testing)
    atheris.Fuzz()


if __name__ == "__main__":
    main(int_and_str_func)
